/* Generated By:JavaCC: Do not edit this line. Skaner.java */
public class Skaner implements SkanerConstants {

  public static void main(String args[])
    throws ParseException, TokenMgrError {
    Skaner interpreter = new Skaner(System.in);

    System.out.println("Dzie\u0139\u201e Dobry, b\u00c4\u2122d\u00c4\u2122 zaraz skanowa\u0139\u201a");

    String result = interpreter.Start();
    System.out.println ("Start returns: " + result);

  }

  final public String Start() throws ParseException, NumberFormatException {
    String val="";
        String wynik="";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case WORD:
      case PARA:
      case SUBO:
      case SUBC:
      case BOLD:
      case ITALICS:
      case UNDERLINE:
      case NO_FORMAT:
      case MONO:
      case SPACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      val = Expression();
     wynik = wynik + " " + val;
    }
    jj_consume_token(0);
  {if (true) return wynik;}
    throw new Error("Missing return statement in function");
  }

  final public String Expression() throws ParseException, NumberFormatException {
   Token t;
   String i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOLD:
      t = jj_consume_token(BOLD);
  {if (true) return i = "BOLD";}
      break;
    case NO_FORMAT:
      t = jj_consume_token(NO_FORMAT);
  {if (true) return i = "NO_FORMAT";}
      break;
    case ITALICS:
      t = jj_consume_token(ITALICS);
  {if (true) return i = "ITALICS";}
      break;
    case SUBC:
      t = jj_consume_token(SUBC);
  {if (true) return i = "SUBC";}
      break;
    case SUBO:
      t = jj_consume_token(SUBO);
  {if (true) return i = "SUBO";}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
  {if (true) return i = "NUMBER";}
      break;
    case WORD:
      t = jj_consume_token(WORD);
  {if (true) return i = "WORD";}
      break;
    case MONO:
      t = jj_consume_token(MONO);
  {if (true) return i = "MONO";}
      break;
    case PARA:
      t = jj_consume_token(PARA);
  {if (true) return i = "konieclinii";}
      break;
    case SPACE:
      t = jj_consume_token(SPACE);
  {if (true) return i = "SPACJA";}
      break;
    case UNDERLINE:
      t = jj_consume_token(UNDERLINE);
  {if (true) return i = "PODKRESLENIE";}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SkanerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x58000,0x58000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7e060,0x7e060,};
   }

  /** Constructor with InputStream. */
  public Skaner(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Skaner(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SkanerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Skaner(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SkanerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Skaner(SkanerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SkanerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
