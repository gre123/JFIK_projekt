/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
  public static final String nl = System.getProperty("line.separator");
  public static void main(String args[])
    throws ParseException, TokenMgrError {
    Parser interpreter = new Parser(System.in);

    System.out.println("Napisz, co mam przeskanowac?");

    String result = interpreter.Start();
    System.out.println ("Start returns: " + result);

  }

///////////////////////////////////////////////////////////////////////////////////////////
//OdtÄ…d jest definicja parsera
///////////////////////////////////////////////////////////////////////////////////////////
  final public String Start() throws ParseException, NumberFormatException {
    String val="";
    String wynik="";
        Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMOTKA:
      case NUMER:
      case WORD:
      case ENTER:
      case NOWALINIA:
      case MORETHANLITERA:
      case KRESKA:
      case H1:
      case H2:
      case H3:
      case H4:
      case H5:
      case URL:
      case EMAIL:
      case LINKO:
      case OBRO:
      case DOUBLE_SPACE:
      case DOUBLE_ENTER:
      case LISTAN:
      case BOLD:
      case ITALICS:
      case UNDERLINE:
      case NO_FORMAT:
      case MONO:
      case SPACE:
      case SYMBOL:
      case DELO:
      case SUPO:
      case SUBO:
      case CODEO:
      case CODEC:
      case QUOTE1:
      case QUOTE2:
      case QUOTE3:
      case FILEO:
      case FILEC:
      case NOWIKIO:
      case FOOTNOTEO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case H1:
        val = Head1();
         wynik += val;
        break;
      case H2:
        val = Head2();
         wynik += val;
        break;
      case H3:
        val = Head3();
         wynik += val;
        break;
      case H4:
        val = Head4();
         wynik += val;
        break;
      case H5:
        val = Head5();
         wynik += val;
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_1(2)) {
          val = Code();
         wynik += val;
        } else if (jj_2_2(2)) {
          val = File();
         wynik += val;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OBRO:
            val = Obrazek();
         wynik += val;
            break;
          case EMOTKA:
            val = Emot();
         wynik += val;
            break;
          case DOUBLE_SPACE:
          case LISTAN:
            //<DOUBLE_SPACE>
               // {wynik+="&nbsp&nbsp";}
               //|
                 val = ListaU();
     wynik += val;
            break;
          case QUOTE1:
          case QUOTE2:
          case QUOTE3:
            val = Quote();
         wynik += val;
            break;
          case SYMBOL:
            val = Symbol();
     wynik += val;
            break;
          case NUMER:
          case WORD:
          case ENTER:
          case NOWALINIA:
          case MORETHANLITERA:
          case KRESKA:
          case URL:
          case EMAIL:
          case LINKO:
          case DOUBLE_ENTER:
          case BOLD:
          case ITALICS:
          case UNDERLINE:
          case NO_FORMAT:
          case MONO:
          case SPACE:
          case DELO:
          case SUPO:
          case SUBO:
          case CODEO:
          case CODEC:
          case FILEO:
          case FILEC:
          case NOWIKIO:
          case FOOTNOTEO:
            val = Zagniezdzalne();
         wynik += val;
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(0);
  {if (true) return wynik;}
    throw new Error("Missing return statement in function");
  }

  final public String Zagniezdzalne() throws ParseException, NumberFormatException {
   Token t;
   String i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOOTNOTEO:
      i = Footnotes();
      break;
    case EMAIL:
      //i = Quote()
              //|
              i = Email();
      break;
    case BOLD:
      i = Bolded();
      break;
    case NUMER:
    case WORD:
    case MORETHANLITERA:
    case SPACE:
      //LOOKAHEAD(CzystyTekst()) 
              i = CzystyTekst();
      break;
    case ENTER:
      jj_consume_token(ENTER);
                 i="";
                 System.out.print("ENTER ");
      break;
    case ITALICS:
      //LOOKAHEAD(Italics()) 
              i = Italics();
      break;
    case UNDERLINE:
      i = Underlined();
      break;
    case MONO:
      i = Monospaced();
      break;
    case DOUBLE_ENTER:
      jj_consume_token(DOUBLE_ENTER);
                 i="</p>\u005cn<p>";
                 System.out.print("DOUBLE_ENTER ");
      break;
    case NO_FORMAT:
      i = NoFormat();
      break;
    case NOWIKIO:
      i = NoWiki();
      break;
    case SUBO:
      i = Sub();
      break;
    case SUPO:
      i = Sup();
      break;
    case DELO:
      i = Del();
      break;
    case URL:
    case LINKO:
      i = Link();
      break;
    case KRESKA:
      jj_consume_token(KRESKA);
                 i="<hr>";
      break;
    case NOWALINIA:
      jj_consume_token(NOWALINIA);
                 i="<br>";
      break;
    case CODEO:
    case CODEC:
    case FILEO:
    case FILEC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CODEO:
        t = jj_consume_token(CODEO);
        break;
      case CODEC:
        t = jj_consume_token(CODEC);
        break;
      case FILEO:
        t = jj_consume_token(FILEO);
        break;
      case FILEC:
        t = jj_consume_token(FILEC);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 i="&lt;"+t.image.substring(1,t.image.length()-1)+"&gt;";
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String Zagniezdzalne2() throws ParseException, NumberFormatException {
   Token t;
   String i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOOTNOTEO:
      i = Footnotes();
      break;
    case EMAIL:
      i = Email();
      break;
    case BOLD:
      i = Bolded();
      break;
    case NUMER:
    case WORD:
    case MORETHANLITERA:
    case SPACE:
      i = CzystyTekst();
      break;
    case ITALICS:
      i = Italics();
      break;
    case UNDERLINE:
      i = Underlined();
      break;
    case MONO:
      i = Monospaced();
      break;
    case NO_FORMAT:
      i = NoFormat();
      break;
    case NOWIKIO:
      i = NoWiki();
      break;
    case SUBO:
      i = Sub();
      break;
    case SUPO:
      i = Sup();
      break;
    case DELO:
      i = Del();
      break;
    case URL:
    case LINKO:
      i = Link();
      break;
    case CODEO:
    case CODEC:
    case FILEO:
    case FILEC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CODEO:
        t = jj_consume_token(CODEO);
        break;
      case CODEC:
        t = jj_consume_token(CODEC);
        break;
      case FILEO:
        t = jj_consume_token(FILEO);
        break;
      case FILEC:
        t = jj_consume_token(FILEC);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 i="&lt;"+t.image.substring(1,t.image.length()-1)+"&gt;";
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String Bolded() throws ParseException {
                String i;
                String value;
    jj_consume_token(BOLD);
                 System.out.print("BOLD ");
                 value="<strong>";
    label_2:
    while (true) {
      i = Zagniezdzalne();
                 value+=i;
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(BOLD);
                 System.out.print("BOLD ");
                 value+="</strong>";
                 {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String Italics() throws ParseException {
                String i;
                String value;
    jj_consume_token(ITALICS);
                 System.out.print("ITALICS ");
                 value="<em>";
    label_3:
    while (true) {
      i = Zagniezdzalne();
                 value+=i;
      if (jj_2_4(2147483647)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(ITALICS);
                 System.out.print("ITALICS ");
                 value+="</em>";
                 {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String Underlined() throws ParseException {
                String i;
                String value;
    jj_consume_token(UNDERLINE);
                 System.out.print("UNDERLINE ");
                 value="<u>";
    label_4:
    while (true) {
      i = Zagniezdzalne();
                 value+=i;
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(UNDERLINE);
                 System.out.print("UNDERLINE ");
                 value+="</u>";
                 {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String Monospaced() throws ParseException {
                String i;
                String value;
    jj_consume_token(MONO);
                 System.out.print("MONO ");
                 value="<code>";
    label_5:
    while (true) {
      i = Zagniezdzalne();
                 value+=i;
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_5;
      }
    }
    jj_consume_token(MONO);
                 System.out.print("MONO ");
                 value+="</code>";
                 {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  String NoFormatBody() throws ParseException {
      Token tok;
          String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == NO_FORMAT) break;
                else {i+=tok.image;}
        tok = getNextToken();
      }
          return i;
  }

  String NoWikiBody() throws ParseException {
      Token tok;
          String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == NOWIKIC) break;
                else {i+=tok.image;}
        tok = getNextToken();
      }
          return i;
  }

  final public String NoFormat() throws ParseException {
         String i;
    jj_consume_token(NO_FORMAT);
    i = NoFormatBody();
    jj_consume_token(NO_FORMAT);
         System.out.print("NO_FORMAT costam NO_FORMAT ");
         {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String NoWiki() throws ParseException {
         String i;
    jj_consume_token(NOWIKIO);
    i = NoWikiBody();
    jj_consume_token(NOWIKIC);
         System.out.print("NOWIKIo costam NOWIKIc ");
         {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String Sub() throws ParseException {
         String i;
    jj_consume_token(SUBO);
         System.out.print("SUBo");
    i = Zagniezdzalne();
    jj_consume_token(SUBC);
         System.out.print("SUBc");
         {if (true) return "<sub>"+i+"</sub>";}
    throw new Error("Missing return statement in function");
  }

  final public String Sup() throws ParseException {
         String i;
    jj_consume_token(SUPO);
         System.out.print("SUBo");
    i = Zagniezdzalne();
    jj_consume_token(SUPC);
         System.out.print("SUBc");
         {if (true) return "<sup>"+i+"</sup>";}
    throw new Error("Missing return statement in function");
  }

  final public String Del() throws ParseException {
         String i;
    jj_consume_token(DELO);
         System.out.print("DELo");
    i = Zagniezdzalne();
    jj_consume_token(DELC);
         System.out.print("DELc");
         {if (true) return "<del>"+i+"</del>";}
    throw new Error("Missing return statement in function");
  }

  String HeadBody() throws ParseException {
      Token tok;
          String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == HC) break;
                else {i+=tok.image;}
        tok = getNextToken();
      }
          return i;
  }

  final public String Head1() throws ParseException {
        String i;
    jj_consume_token(H1);
    i = HeadBody();
    jj_consume_token(HC);
         System.out.print("H1 costam Hc ");
         {if (true) return "<h1>"+i+"</h1>";}
    throw new Error("Missing return statement in function");
  }

  final public String Head2() throws ParseException {
        String i;
    jj_consume_token(H2);
    i = HeadBody();
    jj_consume_token(HC);
         System.out.print("H2 costam Hc ");
         {if (true) return "<h2>"+i+"</h2>";}
    throw new Error("Missing return statement in function");
  }

  final public String Head3() throws ParseException {
        String i;
    jj_consume_token(H3);
    i = HeadBody();
    jj_consume_token(HC);
         System.out.print("H3 costam Hc ");
         {if (true) return "<h3>"+i+"</h3>";}
    throw new Error("Missing return statement in function");
  }

  final public String Head4() throws ParseException {
        String i;
    jj_consume_token(H4);
    i = HeadBody();
    jj_consume_token(HC);
         System.out.print("H4 costam Hc ");
         {if (true) return "<h4>"+i+"</h4>";}
    throw new Error("Missing return statement in function");
  }

  final public String Head5() throws ParseException {
        String i;
    jj_consume_token(H5);
    i = HeadBody();
    jj_consume_token(HC);
         System.out.print("H5 costam Hc ");
         {if (true) return "<h5>"+i+"</h5>";}
    throw new Error("Missing return statement in function");
  }

  final public String Code() throws ParseException {
        String i;
    jj_consume_token(CODEO);
    i = CodeFileBody();
    jj_consume_token(CODEC);
         System.out.print("CODEo costam CODEc ");
         {if (true) return "<pre>"+i+"</pre>";}
    throw new Error("Missing return statement in function");
  }

  final public String File() throws ParseException {
        String i;
    jj_consume_token(FILEO);
    i = CodeFileBody();
    jj_consume_token(FILEC);
         System.out.print("FILEo costam FILEc ");
         {if (true) return "<pre>"+i+"</pre>";}
    throw new Error("Missing return statement in function");
  }

  String CodeFileBody() throws ParseException {
      Token tok;
          String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == CODEC || tok.kind == FILEC) break;
                else {i+=tok.image;}
        tok = getNextToken();
      }
          return i;
  }

  final public String Quote() throws ParseException {
        String value="";
        String i;
    if (jj_2_10(2147483647)) {
      jj_consume_token(QUOTE1);
                 System.out.print("QUOTE1 ");
      label_6:
      while (true) {
        i = Zagniezdzalne2();
                 value+=i;
        if (jj_2_7(2147483647)) {
          ;
        } else {
          break label_6;
        }
      }
                 {if (true) return "<blockquote>"+value+"</blockquote>";}
    } else if (jj_2_11(2147483647)) {
      jj_consume_token(QUOTE2);
                 System.out.print("QUOTE2 ");
      label_7:
      while (true) {
        i = Zagniezdzalne2();
                 value+=i;
        if (jj_2_8(2147483647)) {
          ;
        } else {
          break label_7;
        }
      }
                 {if (true) return "<blockquote><blockquote>"+value+"</blockquote></blockquote>";}
    } else if (jj_2_12(2147483647)) {
      jj_consume_token(QUOTE3);
                 System.out.print("QUOTE3 ");
      label_8:
      while (true) {
        i = Zagniezdzalne2();
                 value+=i;
        if (jj_2_9(2147483647)) {
          ;
        } else {
          break label_8;
        }
      }
                 {if (true) return "<blockquote><blockquote><blockquote>"+value+"</blockquote></blockquote></blockquote>";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String ListaU() throws ParseException {
        String value="";
        String i;
    label_9:
    while (true) {
         System.out.print("ListaUo ");
      i = ListaUElement();
         value+=i;
      if (jj_2_13(3)) {
        ;
      } else {
        break label_9;
      }
    }
         System.out.print("ListaUc ");
         {if (true) return "<ul>"+value+"</ul>";}
    throw new Error("Missing return statement in function");
  }

  final public String ListaUElement() throws ParseException {
        String value="";
        String i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LISTAN:
      jj_consume_token(LISTAN);
                 System.out.print("ListaN ");
      label_10:
      while (true) {
        if (jj_2_14(2147483647)) {
          ;
        } else {
          break label_10;
        }
        i = Zagniezdzalne2();
                         value+=i;
      }
      jj_consume_token(ENTER);
                 System.out.print("ListaUElement ");
                 {if (true) return "<li>"+value+"</li>";}
      break;
    case DOUBLE_SPACE:
      value = ListaUZagniezdzona();
                 {if (true) return value;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String ListaUZagniezdzona() throws ParseException {
        String value="";
        String i;
                 System.out.print("ListaUZagniezdzonao ");
    label_11:
    while (true) {
      jj_consume_token(DOUBLE_SPACE);
      i = ListaUElement();
                 value+=i;
      if (jj_2_15(2)) {
        ;
      } else {
        break label_11;
      }
    }
                 System.out.print("ListaUZagniezdzonac ");
                 {if (true) return "<ul>"+value+"</ul>";}
    throw new Error("Missing return statement in function");
  }

/*String ListaN():
{
	String i="";
	Token t;
}
{
	(<LISTAN> (LOOKAHEAD(2) (<SPACE>) | " ")*  i=Zagniezdzalne() (<ENTER>|<DOUBLE_ENTER>))
	{System.out.print("Lista N wiersz ");}
	{return "<li>"+i+"</li>";}
}

String ListaP():
{
	String i="";
	Token t;
}
{
	(<LISTAP> (LOOKAHEAD(2) (<SPACE>) | " ")*  i=Zagniezdzalne() (<ENTER>|<DOUBLE_ENTER>))
	{System.out.print("Lista N wiersz ");}
	{return "<li>"+i+"</li>";}
}
*/
  final public String Symbol() throws ParseException {
        String i="";
        Token t;
    t = jj_consume_token(SYMBOL);
         System.out.print("SYMBOL");
         if(t.image.equals("->")){System.out.print(t.image);{if (true) return "\u00e2\u2020\u2019";}}
        if(t.image.equals("<-")){System.out.print(t.image);{if (true) return "\u00e2\u2020\ufffd";}}
        if(t.image.equals("<->")){System.out.print(t.image);{if (true) return "\u00e2\u2020\u201d";}}
        if(t.image.equals("=>")){System.out.print(t.image);{if (true) return "\u00e2\u2021\u2019";}}
        if(t.image.equals("<=")){System.out.print(t.image);{if (true) return "\u00e2\u2021\ufffd";}}
        if(t.image.equals("<=>")){System.out.print(t.image);{if (true) return "\u00e2\u2021\u201d";}}
        if(t.image.equals(">>")){System.out.print(t.image);{if (true) return "\u00c2\u00bb";}}
        if(t.image.equals("<<")){System.out.print(t.image);{if (true) return "\u00c2\u00ab";}}
        if(t.image.equals("--")){System.out.print(t.image);{if (true) return "\u00e2\u20ac\u201c";}}
        if(t.image.equals("---")){System.out.print(t.image);{if (true) return "\u00e2\u20ac\u201d";}}
        if(t.image.equals("(c)")){System.out.print(t.image);{if (true) return "\u00c2\u00a9";}}
        if(t.image.equals("(tm)")){System.out.print(t.image);{if (true) return "\u00e2\u201e\u02d8";}}
        if(t.image.equals("(r)")){System.out.print(t.image);{if (true) return "\u00c2\u00ae";}}
         {if (true) return "" ;}
    throw new Error("Missing return statement in function");
  }

  final public String Emot() throws ParseException {
        String i="";
        Token t;
    t = jj_consume_token(EMOTKA);
         System.out.print("EMOT");
         if(t.image.equals("8-)")){System.out.print(t.image);{if (true) return "<img src=\u005c"1.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals("8-O")){System.out.print(t.image);{if (true) return "<img src=\u005c"2.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-(")){System.out.print(t.image);{if (true) return "<img src=\u005c"3.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-)")){System.out.print(t.image);{if (true) return "<img src=\u005c"4.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals("=)")){System.out.print(t.image);{if (true) return "<img src=\u005c"5.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-/")){System.out.print(t.image);{if (true) return "<img src=\u005c"6.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-\u005c\u005c")){System.out.print(t.image);{if (true) return "<img src=\u005c"7.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-?")){System.out.print(t.image);{if (true) return "<img src=\u005c"8.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-D")){System.out.print(t.image);{if (true) return "<img src=\u005c"9.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-P")){System.out.print(t.image);{if (true) return "<img src=\u005c"10.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-O")){System.out.print(t.image);{if (true) return "<img src=\u005c"11.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-X")){System.out.print(t.image);{if (true) return "<img src=\u005c"12.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":-|")){System.out.print(t.image);{if (true) return "<img src=\u005c"13.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(";-)")){System.out.print(t.image);{if (true) return "<img src=\u005c"14.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals("^_^")){System.out.print(t.image);{if (true) return "<img src=\u005c"15.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":?:")){System.out.print(t.image);{if (true) return "<img src=\u005c"16.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals(":!:")){System.out.print(t.image);{if (true) return "<img src=\u005c"17.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals("LOL")){System.out.print(t.image);{if (true) return "<img src=\u005c"18.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals("FIXME")){System.out.print(t.image);{if (true) return "<img src=\u005c"19.gif\u005c" alt="+t.image+" />";}}
         if(t.image.equals("DELETEME")){System.out.print(t.image);{if (true) return "<img src=\u005c"20.gif\u005c" alt="+t.image+" />";}}
         {if (true) return "" ;}
    throw new Error("Missing return statement in function");
  }

  final public String Footnotes() throws ParseException {
        String i;
    jj_consume_token(FOOTNOTEO);
    i = CzystyTekst();
    jj_consume_token(FOOTNOTEC);
                 System.out.print("Footnotes ");
                 {if (true) return "<div id=\u005c"insitu__fn\u005c" class=\u005c"insitu-footnote JSpopup\u005c" aria-hidden=\u005c"true\u005c" role=\u005c"tooltip\u005c" style=\u005c"top: 3203.109375px; left: 202px; display: none;\u005c">"+i+"</div>";}
    throw new Error("Missing return statement in function");
  }

  final public String Obrazek() throws ParseException {
        String i="";
        Token t=null;
        String wynik="";
    jj_consume_token(OBRO);
    if (jj_2_16(3)) {
      t = jj_consume_token(URL);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOMENA:
        t = jj_consume_token(DOMENA);
        break;
      case NUMER:
      case WORD:
      case MORETHANLITERA:
      case SPACE:
        i = CzystyTekst();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(OBRC);
                 System.out.print("Obrazek ");
                if(i==""){
                i=t.image;
                }
                 wynik+= "<img src="+i+" />";
         {if (true) return wynik;}
    throw new Error("Missing return statement in function");
  }

  final public String Link() throws ParseException {
        Token tl=null;
        Token t=null;
        String i="";
    String l="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URL:
      t = jj_consume_token(URL);
                 System.out.print("LINK ");
                 {if (true) return "<a href="+t.image+">"+t.image+"</a>";}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_21(3)) {
        jj_consume_token(LINKO);
        if (jj_2_17(3)) {
          tl = jj_consume_token(URL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOMENA:
            tl = jj_consume_token(DOMENA);
            break;
          case NUMER:
          case WORD:
          case MORETHANLITERA:
          case SPACE:
            l = CzystyTekst();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LINKC);
                 System.out.print("LINK2 ");
                if (l==""){
                l=tl.image;
                }
                 {if (true) return "<a href="+l+">"+l+"</a>";}
      } else if (jj_2_22(4)) {
        jj_consume_token(LINKO);
        label_12:
        while (true) {
          if (jj_2_18(4)) {
            ;
          } else {
            break label_12;
          }
          jj_consume_token(SPACE);
        }
        if (jj_2_19(3)) {
          tl = jj_consume_token(URL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOMENA:
            tl = jj_consume_token(DOMENA);
            break;
          case NUMER:
          case WORD:
          case MORETHANLITERA:
          case SPACE:
            l = CzystyTekst();
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_13;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(KOLUMNA);
        if (jj_2_20(2)) {
          t = jj_consume_token(URL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMER:
          case WORD:
          case MORETHANLITERA:
          case SPACE:
            i = CzystyTekst();
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LINKC);
                 System.out.print("LINK3 ");
                if (l==""){
                l=tl.image;
                }
                if (i==""){
                i=t.image;
                }
                 {if (true) return "<a href=\u005c""+l+"\u005c" title=\u005c""+l+"\u005c">"+i+"</a>";}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Email() throws ParseException {
        Token t;
        String i;
    t = jj_consume_token(EMAIL);
                 i=t.image.substring(1,t.image.length()-1);
                 System.out.print("EMAIL ");
                 {if (true) return "<a href=\u005c"mailto:"+i+"\u005c""+" title=\u005c""+i+"\u005c">"+i+"</a>";}
    throw new Error("Missing return statement in function");
  }

  final public String Slowo() throws ParseException {
         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
      break;
    case NUMER:
      t = jj_consume_token(NUMER);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                 {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String CzystyTekst() throws ParseException {
                Token t;
                String value="";
                String i="";
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMER:
      case WORD:
        //t=<ENTER>
                        //|
                        i = Slowo();
                 value+=i;
        break;
      case MORETHANLITERA:
        t = jj_consume_token(MORETHANLITERA);
                value +=t.image;
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                 value+=" ";
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_23(2)) {
        ;
      } else {
        break label_14;
      }
    }
                 System.out.print("CzystyTekst ");
                 {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(BOLD)) return true;
    Token xsp;
    if (jj_3R_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BOLD)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(URL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(MORETHANLITERA)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(NOWALINIA)) return true;
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    if (jj_3_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DELO)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(DELC)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(KRESKA)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(DOUBLE_SPACE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(SUPO)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(SUPC)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(DOUBLE_ENTER)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(URL)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(SUBO)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(SUBC)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(ENTER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(LISTAN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENTER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NOWIKIO)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(EMAIL)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NO_FORMAT)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(QUOTE3)) return true;
    Token xsp;
    if (jj_3R_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(URL)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LINKO)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(36)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(KOLUMNA)) return true;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    if (jj_scan_token(LINKC)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(QUOTE2)) return true;
    Token xsp;
    if (jj_3R_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LINKO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    if (jj_scan_token(LINKC)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(URL)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(MONO)) return true;
    Token xsp;
    if (jj_3R_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(MONO)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(QUOTE1)) return true;
    Token xsp;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(URL)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(UNDERLINE)) return true;
    Token xsp;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(UNDERLINE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(FOOTNOTEO)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(FOOTNOTEC)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(FILEO)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(ITALICS)) return true;
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ITALICS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(CODEO)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_17()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xb955fc6e,0x1f000,0xb9540c6e,0x0,0x90540c6c,0x0,0x8054040c,0x28000000,0x8040c,0x8040c,0x8040c,0x0,0x40c,0x40000,0xc,0x40c,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x17faa3f,0x0,0x17faa3f,0x318000,0x171aa1f,0x318000,0x171aa1f,0x0,0x10,0x10,0x10,0x10,0x10,0x0,0x0,0x10,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
