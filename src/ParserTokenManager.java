/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e000L) != 0L)
         {
            jjmatchedKind = 10;
            return 123;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 4;
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 155;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 10;
            return 97;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 10;
            return 87;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 10;
            return 23;
         }
         if ((active0 & 0xf1fe0000000000L) != 0L)
         {
            jjmatchedKind = 10;
            return 82;
         }
         if ((active0 & 0x200000f83c00000L) != 0L)
         {
            jjmatchedKind = 10;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x40L) != 0L)
            return 24;
         if ((active0 & 0x50aa0000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return 159;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 156;
         if ((active0 & 0x1e000L) != 0L)
            return 122;
         if ((active0 & 0x2a1550f83c00000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xe000L) != 0L)
            return 121;
         if ((active0 & 0x50aa0000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return 159;
         }
         if ((active0 & 0xa1550000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x6000L) != 0L)
            return 120;
         if ((active0 & 0x50aa0000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return 159;
         }
         if ((active0 & 0xa1540000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x2000L) != 0L)
            return 118;
         if ((active0 & 0x50800000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return 159;
         }
         if ((active0 & 0xa1540000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return 159;
         }
         if ((active0 & 0xa1540000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return 159;
         }
         if ((active0 & 0xa1000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 40:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 41:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0xf1fe0000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x1e000L);
      case 91:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 93:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 94:
         return jjStartNfaWithStates_0(0, 38, 4);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 124:
         return jjStopAtPos(0, 39);
      case 125:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 156);
         break;
      case 37:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 39:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 40:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 41:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 42:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 47:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0xa1540000000000L);
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 61:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe000L);
      case 91:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 92:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 24);
         break;
      case 93:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 95:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x280000000000L);
      case 123:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 125:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 40);
         break;
      case 61:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40800000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10020000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x81000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 118);
         break;
      case 62:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(5, 42);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(5, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 47);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(5, 52);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x21000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(6, 53);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 54);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xb3000000000L, 0x8001000080010L
};
static final long[] jjbitVec1 = {
   0x66000000030000fcL, 0x1e000030cc30001eL, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x21000000L
};
static final long[] jjbitVec3 = {
   0x400004344100000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x400000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 159;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfc00fffe00000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 32)
                     jjAddStates(5, 6);
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 13)
                     jjAddStates(11, 15);
                  else if (curChar == 61)
                     jjCheckNAddStates(16, 19);
                  else if (curChar == 58)
                     jjAddStates(20, 31);
                  else if (curChar == 40)
                     jjAddStates(32, 34);
                  else if (curChar == 60)
                     jjCheckNAddStates(35, 38);
                  else if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 63)
                     jjCheckNAdd(75);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 60)
                     jjCheckNAdd(62);
                  if (curChar == 56)
                     jjAddStates(39, 40);
                  break;
               case 120:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 61)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(119);
                  }
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  else if (curChar == 46)
                     jjCheckNAdd(62);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 156:
                  if (curChar == 45)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  else if (curChar == 61)
                     jjCheckNAdd(81);
                  else if (curChar == 45)
                     jjCheckNAdd(81);
                  if (curChar == 61)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 121:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if (curChar == 62)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  else if (curChar == 41)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 97:
                  if (curChar == 33)
                     jjCheckNAdd(114);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if (curChar == 63)
                     jjCheckNAdd(114);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 45)
                     jjCheckNAdd(93);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if (curChar == 45)
                     jjCheckNAdd(0);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 155:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 0:
                  if (curChar == 41 && kind > 1)
                     kind = 1;
                  break;
               case 1:
               case 92:
                  if (curChar == 45)
                     jjCheckNAdd(0);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(22);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0xfc00fffe00000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAddStates(48, 50);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 47)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(51, 54);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(51, 54);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(55, 58);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(37, 40);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(59, 61);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(62, 64);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(65, 69);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(43, 31);
                  break;
               case 48:
                  if (curChar == 47)
                     jjCheckNAdd(28);
                  break;
               case 49:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 46)
                     jjCheckNAddStates(70, 72);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 60)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAdd(62);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     jjCheckNAddStates(73, 75);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 62 && kind > 20)
                     kind = 20;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 70);
                  break;
               case 74:
                  if (curChar == 63)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 78:
                  if ((0x100000200L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 79:
                  if (curChar == 60)
                     jjCheckNAddStates(35, 38);
                  break;
               case 80:
                  if (curChar == 45 && kind > 37)
                     kind = 37;
                  break;
               case 81:
                  if (curChar == 62 && kind > 37)
                     kind = 37;
                  break;
               case 83:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 84:
                  if (curChar == 61)
                     jjCheckNAdd(81);
                  break;
               case 85:
                  if (curChar == 40)
                     jjAddStates(32, 34);
                  break;
               case 86:
                  if (curChar == 41 && kind > 37)
                     kind = 37;
                  break;
               case 91:
                  if (curChar == 56)
                     jjAddStates(39, 40);
                  break;
               case 94:
                  if (curChar == 45)
                     jjCheckNAdd(93);
                  break;
               case 95:
                  if (curChar == 58)
                     jjAddStates(20, 31);
                  break;
               case 96:
                  if (curChar == 40 && kind > 1)
                     kind = 1;
                  break;
               case 98:
                  if (curChar == 45)
                     jjCheckNAdd(0);
                  break;
               case 99:
                  if (curChar == 47 && kind > 1)
                     kind = 1;
                  break;
               case 100:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 63 && kind > 1)
                     kind = 1;
                  break;
               case 104:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 106:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 108:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 45)
                     jjCheckNAdd(93);
                  break;
               case 111:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 58 && kind > 1)
                     kind = 1;
                  break;
               case 115:
                  if (curChar == 63)
                     jjCheckNAdd(114);
                  break;
               case 116:
                  if (curChar == 33)
                     jjCheckNAdd(114);
                  break;
               case 117:
                  if (curChar == 61)
                     jjCheckNAddStates(16, 19);
                  break;
               case 119:
                  if (curChar != 61)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(119);
                  break;
               case 124:
                  if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  break;
               case 125:
                  if (curChar == 61)
                     jjCheckNAddStates(41, 43);
                  break;
               case 126:
                  if ((0x2400L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 127:
                  if (curChar == 10 && kind > 17)
                     kind = 17;
                  break;
               case 128:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(0, 4);
                  break;
               case 130:
                  if ((0x2400L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 131:
                  if (curChar == 10 && kind > 28)
                     kind = 28;
                  break;
               case 132:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 62 && kind > 49)
                     kind = 49;
                  break;
               case 134:
                  if (curChar == 62 && kind > 50)
                     kind = 50;
                  break;
               case 135:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 62 && kind > 51)
                     kind = 51;
                  break;
               case 137:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 13)
                     jjAddStates(11, 15);
                  break;
               case 140:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 141:
                  if (curChar == 10)
                     jjCheckNAddTwoStates(130, 132);
                  break;
               case 142:
                  if (curChar == 10)
                     jjCheckNAdd(133);
                  break;
               case 143:
                  if (curChar == 10)
                     jjCheckNAdd(135);
                  break;
               case 144:
                  if (curChar == 10)
                     jjCheckNAdd(138);
                  break;
               case 145:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 10);
                  break;
               case 146:
                  if (curChar == 45)
                     jjCheckNAdd(147);
                  break;
               case 147:
                  if (curChar == 45)
                     jjCheckNAddStates(76, 79);
                  break;
               case 148:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  break;
               case 149:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 150:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 151:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 153:
                  if (curChar == 45)
                     jjCheckNAdd(80);
                  break;
               case 154:
                  if (curChar == 32)
                     jjAddStates(5, 6);
                  break;
               case 157:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 158:
                  if (curChar == 45 && kind > 30)
                     kind = 30;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 87:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(86);
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if ((0x68000001b8000001L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 159:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  else if (curChar == 64)
                     jjCheckNAdd(67);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 82:
               case 62:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 3:
                  if (curChar == 94 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 7:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 10:
               case 14:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if ((0x68000001b8000001L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(51, 54);
                  break;
               case 33:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(55, 58);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(59, 61);
                  break;
               case 38:
                  if (curChar == 92)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(62, 64);
                  break;
               case 40:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(65, 69);
                  break;
               case 42:
                  if (curChar == 92)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(43, 31);
                  break;
               case 44:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 46:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 51:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if (curChar == 92)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 64)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 69:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if (curChar == 92)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(72, 70);
                  break;
               case 73:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 76:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 88:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 89:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 93:
                  if ((0x800000008000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 101:
                  if (curChar == 92 && kind > 1)
                     kind = 1;
                  break;
               case 105:
                  if ((0x1000000010L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 107:
                  if ((0x1000000010000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 110:
                  if ((0x100000001000000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 112:
                  if (curChar == 124)
                     kind = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 22:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(22);
                  break;
               case 24:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 30:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(51, 54);
                  break;
               case 34:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(55, 58);
                  break;
               case 37:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(59, 61);
                  break;
               case 39:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(62, 64);
                  break;
               case 41:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(65, 69);
                  break;
               case 43:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(43, 31);
                  break;
               case 57:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 72:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(72, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 159 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   130, 132, 133, 135, 138, 155, 157, 152, 81, 80, 153, 140, 141, 142, 143, 144, 
   0, 123, 124, 81, 97, 98, 100, 102, 104, 106, 108, 109, 111, 113, 115, 116, 
   87, 89, 90, 80, 82, 83, 84, 92, 94, 125, 126, 128, 63, 64, 65, 66, 
   28, 30, 44, 31, 32, 35, 36, 31, 35, 36, 41, 31, 36, 37, 31, 36, 
   39, 31, 32, 35, 36, 41, 55, 57, 60, 67, 69, 73, 147, 148, 149, 151, 
   148, 149, 151, 28, 29, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\134\134", null, null, null, null, null, 
null, "\75\75\75\75\75", "\75\75\75\75", "\75\75\75", "\75\75", null, null, null, 
null, null, "\133\133", "\135\135", "\173\173", "\175\175", null, "\40\40", null, 
null, null, "\52\52", "\57\57", "\137\137", "\45\45", "\47\47", null, null, "\136", 
"\174", "\72\72\72", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\50\50", "\51\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[159];
private final int[] jjstateSet = new int[318];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 159; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
