/* na pewno zadziała, przecież nie jestem debilem */

options {
  STATIC = false;
  IGNORE_CASE = true;
  //LOOKAHEAD=2;
  //UNICODE_INPUT = true;
  //JAVA_UNICODE_ESCAPE = false;

}

PARSER_BEGIN(Parser)

public class Parser {
  public static final String nl = System.getProperty("line.separator");
  public static void main(String args[]) 
    throws ParseException, TokenMgrError {
    Parser interpreter = new Parser(System.in);

    System.out.println("Napisz, co mam przeskanowac?");

    String result = interpreter.Start();
    System.out.println ("Start returns: " + result);
   
  }

}

PARSER_END(Parser)

TOKEN :
{
  < EMOTKA :  "8-)" | "8-O" | ":-(" | ":-)" | "=)"
	| ":-/" | ":-\\" | ":-?" | ":-D" | ":-P" | ":-O"
	| ":-X" | ":-|" | ";-)" | "^_^"
	| ":?:" | ":!:" | "LOL" | "FIXME" | "DELETEME" >
}

TOKEN :
{
  < NUMER : (< CYFRA >)+ >
| < WORD: (< ALNUM > | < OGONEK >)+ | "\\\\" (< ALNUM > | < OGONEK >)+ >
| < #ALNUM :
      < CYFRA >
    | < LITERA >
	//| < MORETHANLITERA >	//może powodować problemy
  >
| < ENTER :
    "\r"
  | "\n"
  | "\r\n" >
| < NOWALINIA : "\\\\" >
| < #CYFRA : [ "0"-"9" ] >
| < #LITERA : [ "a"-"z", "A"-"Z" ] >
/*| < #OGONEK : "\u0104" | "\u0105"
    | "\u0106" | "\u0107"
    | "\u0118" | "\u0119"
    | "\u0141" | "\u0142"
    | "\u0143" | "\u0144"
    | "\u00d3" | "\u00f3"
    | "\u015a" | "\u015b"
    | "\u0179" | "\u017a"
    | "\u017b" | "\u017c" >*/
	
| < #OGONEK : "\u00a4" | "\u00a5" | "\u00a8" | "\u00a9" | "\u2014" | "\ufffd" | "\u02dd" | "\u013e" | "\u0104" | "\u0179" | "\u201a"
	| "\u0164" | "\u00ab" | "\u2020" | "\u0103" | "\u00e4" | "\u02d8" | "\u0155" | "\u0165" | "\ufffd"| "\u0139" | "\u0142" | "\u2021" | "\u2122" | "\u203a"
	| "\u2026" | "\u015f" | "\u201e"	//wciąż są nie wszystkie ale windows jakoś strasznie dziwnie je koduje
	|"\u0104" | "\u0105"
    | "\u0106" | "\u0107"
    | "\u0118" | "\u0119"
    | "\u0141" | "\u0142"
    | "\u0143" | "\u0144"
    | "\u00d3" | "\u00f3"
    | "\u015a" | "\u015b"
    | "\u0179" | "\u017a"
    | "\u017b" | "\u017c">
| < MORETHANLITERA : "~" | "`" | "!" | "@" | "#" | "$" | "%" | "&" | "(" | ")" | "_" | "+" | "=" | "{" | "}" | "[" | "]"
| ";" | ":" | "'" | "\"" | "\\" | "<" | ">" | "," | "." | "/" | "?" | "*" | "-">		/*czyli chyba dowolny znak na klawiaturze*/
}

TOKEN :
{
  < KRESKA : "---" ("-")+ (<SPACE>)* < ENTER >>
| < H1 : "======" ("=")* >
| < H2 : "=====" >
| < H3 : "====" >
| < H4 : "===" >
| < H5 : "==" >
| < HC : "==" ("=")* <ENTER>>
}

TOKEN :
{
  < URL :
    ("www." | "http://")
    < DOMENA >
    ( "/" (< WORD >)* ("." < WORD >)* )* >
| < DOMENA : ((< ALNUM >)+ ".")+ < WORD >>
| < EMAIL : "<" < EMAIL_NAZWA > "@" <DOMENA > ">">	//email nie jest rozpoznawany sam z siebie, ale ze znacznikami <> powinien być
| < #EMAIL_NAZWA : ((< ALNUM >)+ ".")* (< ALNUM >)+>	//prawie jak domena, ale nie całkiem
}

TOKEN :
{
  < LINKO : "[[" >
| < LINKC : "]]" >
}

TOKEN :
{
  < OBRO : "{{" >
| < OBRC : "}}" >
}

TOKEN :
{
  < WYMIARY : "?" < NUMER > "x" < NUMER >>	//razem z pytajnikiem
  
| < DOUBLE_SPACE : "  " >
| < DOUBLE_ENTER : <ENTER> <ENTER> >
| < LISTAN : < DOUBLE_SPACE > "*" >
| < LISTAP : < DOUBLE_SPACE > "-" >
//| < LISTANWIERSZ : < LISTAN > (<WORD>)* <ENTER>  >
//| < WIERSZKILKAN : (<WIERSZN>)*  >


| < BOLD : "**" >
| < ITALICS : "//" >
| < UNDERLINE : "__" >
| < NO_FORMAT : "%%" >
| < MONO : "''" >
| < SPACE : " " | "\t" >
}
//SKIP:{" "}




TOKEN :
{
  < SYMBOL : "->" | "<-" | "<->" | "=>" | "<=" | "<=>" 
	| "--" | "---"
	| "(c)" | "(tm)" | "(r)" >
}

TOKEN :
{
  < HEADER : "^" >
| < KOLUMNA : "|" >
| < VERT_SPAN : ":::" >
}

TOKEN :
{
  < DELO : "<del>" >
| < DELC : "</del>" >
}

TOKEN :
{
  < SUPO : "<sup>" >
| < SUPC : "</sup>" >
}

TOKEN :
{
  < SUBO : "<sub>" >
| < SUBC : "</sub>" >
}

TOKEN :
{
  < CODEO : "<code>" >
| < CODEC : "</code>" >
}

TOKEN :
{
	< QUOTE1 : <ENTER> ">" >
|	< QUOTE2 : <ENTER> ">>" >
|	< QUOTE3 : <ENTER> ">>>" >
}

TOKEN :
{
  < FILEO : "<file>" >		//załatwione
| < FILEC : "</file>" >
}

TOKEN :
{
  < NOWIKIO : "<nowiki>" >	//załatwione
| < NOWIKIC : "</nowiki>" >
}

TOKEN :
{
  < FOOTNOTEO : "((" >		//to nie będzie łatwe do parsowania
| < FOOTNOTEC : "))" >
}

///////////////////////////////////////////////////////////////////////////////////////////
//Odtąd jest definicja parsera
///////////////////////////////////////////////////////////////////////////////////////////
String Start() throws NumberFormatException :
{
    String val="";
    String wynik="";
	Token t;
}
{
 (
   val=Head1()
	{wynik += val;}
   |
   val=Head2()
	{wynik += val;}
   |
   val=Head3()
	{wynik += val;}
   |
   val=Head4()
	{wynik += val;}
   |
   val=Head5()
	{wynik += val;}
   |LOOKAHEAD(2)
   val=Code()
	{wynik += val;}
   |LOOKAHEAD(2)
   val=File()
	{wynik += val;}
   |
   val=Obrazek()
	{wynik += val;}
   |
   val=Emot()
	{wynik += val;}
   |
   LOOKAHEAD(2)<DOUBLE_SPACE>
    {wynik+="&nbsp&nbsp";}
   |LOOKAHEAD(3)
     val=ListaU()
    {wynik += val;}
   |
     val=ListaO()
    {wynik += val;}
   |
   	val = Quote()
	{wynik += val;}
	|LOOKAHEAD(2)
   	val = Row()
	{wynik += val;}
	|
   val=Symbol()
    {wynik += val;}
     |
   val = Zagniezdzalne()
	{wynik += val;}
 )*
 <EOF>
 {return wynik; }
}

String Zagniezdzalne() throws NumberFormatException :
{
   Token t;
   String i;
}
{
(
	i=Footnotes()
	|
	//i = Quote()
	//|
	i = Email()
	|
	i = Bolded()
	|
		//LOOKAHEAD(CzystyTekst()) 
	i = CzystyTekst()
	|
	<ENTER>
	{i="";}
	{System.out.print("ENTER ");}
	|
		//LOOKAHEAD(Italics()) 
	i = Italics()
	|
	i = Underlined()
	|
	i = Monospaced()
	|
	<DOUBLE_ENTER>
		{i="</p>\n<p>";}
		{System.out.print("DOUBLE_ENTER ");}
	|
	i=NoFormat()
	|
	i=NoWiki()
	|
	i=Sub()
	|
	i=Sup()
	|
	i=Del()
	|
	i=Link()
	|
	<KRESKA>
		{i="<hr>";}
	|
	<NOWALINIA>
		{i="<br>";}
	|
	(t=<CODEO> | t=<CODEC> | t=<FILEO> | t=<FILEC>)
		{i="&lt;"+t.image.substring(1,t.image.length()-1)+"&gt;";}	
)
 {return i;}
}
String Zagniezdzalne2() throws NumberFormatException : //do rzeczy zagnieżdżalnych w jednej linijce
{
   Token t;
   String i;
}
{
(
	i=Footnotes()
	|
	i = Email()
	|
	i = Bolded()
	|
	i = CzystyTekst()
	|
	i = Italics()
	|
	i = Underlined()
	|
	i = Monospaced()
	|
	i=NoFormat()
	|
	i=NoWiki()
	|
	i=Sub()
	|
	i=Sup()
	|
	i=Del()
	|
	i=Link()
	|
	(t=<CODEO> | t=<CODEC> | t=<FILEO> | t=<FILEC>)
		{i="&lt;"+t.image.substring(1,t.image.length()-1)+"&gt;";}	
)
 {return i;}
}
String Bolded():
	{
		String i;
		String value;
	}
	{
		<BOLD>
		{System.out.print("BOLD ");}
		{value="<strong>";}
		(
		LOOKAHEAD(Zagniezdzalne()) i=Zagniezdzalne()
		{value+=i;}
		)+
		<BOLD>
		{System.out.print("BOLD ");}
		{value+="</strong>";}
		{return value;}
	}
	
String Italics():
	{
		String i;
		String value;
	}
	{
		<ITALICS>
		{System.out.print("ITALICS ");}
		{value="<em>";}
		(
		LOOKAHEAD(Zagniezdzalne()) i=Zagniezdzalne()
		{value+=i;}
		)+
		<ITALICS>
		{System.out.print("ITALICS ");}
		{value+="</em>";}
		{return value;}
	}
	
String Underlined():
	{
		String i;
		String value;
	}
	{
		<UNDERLINE>
		{System.out.print("UNDERLINE ");}
		{value="<u>";}
		(
		LOOKAHEAD(Zagniezdzalne()) i=Zagniezdzalne()
		{value+=i;}
		)+
		<UNDERLINE>
		{System.out.print("UNDERLINE ");}
		{value+="</u>";}
		{return value;}
	}
	
String Monospaced():
	{
		String i;
		String value;
	}
	{
		<MONO>
		{System.out.print("MONO ");}
		{value="<code>";}
		(
		LOOKAHEAD(Zagniezdzalne()) i=Zagniezdzalne()
		{value+=i;}
		)+
		<MONO>
		{System.out.print("MONO ");}
		{value+="</code>";}
		{return value;}
	}

JAVACODE
String NoFormatBody() {
      Token tok;
	  String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == NO_FORMAT) break;
		else {i+=tok.image;}
        tok = getNextToken();
      }
	  return i;
}

JAVACODE
String NoWikiBody() {
      Token tok;
	  String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == NOWIKIC) break;
		else {i+=tok.image;}
        tok = getNextToken();
      }
	  return i;
}

String NoFormat():
	{String i;}
	{
	<NO_FORMAT> i=NoFormatBody() <NO_FORMAT>
	{System.out.print("NO_FORMAT costam NO_FORMAT ");}
	{return i;}
	}
	
String NoWiki():
	{String i;}
	{
	<NOWIKIO> i=NoWikiBody() <NOWIKIC>
	{System.out.print("NOWIKIo costam NOWIKIc ");}
	{return i;}
	}
	
String Sub():
	{String i;}
	{
	<SUBO> 
	{System.out.print("SUBo");}
	i=Zagniezdzalne() 
	<SUBC>
	{System.out.print("SUBc");}
	{return "<sub>"+i+"</sub>";}
	}
	
String Sup():
	{String i;}
	{
	<SUPO> 
	{System.out.print("SUBo");}
	i=Zagniezdzalne() 
	<SUPC>
	{System.out.print("SUBc");}
	{return "<sup>"+i+"</sup>";}
	}
String Del():
	{String i;}
	{
	<DELO> 
	{System.out.print("DELo");}
	i=Zagniezdzalne() 
	<DELC>
	{System.out.print("DELc");}
	{return "<del>"+i+"</del>";}
	}
	
JAVACODE
String HeadBody() {
      Token tok;
	  String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == HC) break;
		else {i+=tok.image;}
        tok = getNextToken();
      }
	  return i;
}

String Head1():
{
	String i;
}
{
	(<H1> i=HeadBody() <HC>)
	{System.out.print("H1 costam Hc ");}
	{return "<h1>"+i+"</h1>";}
}

String Head2():
{
	String i;
}
{
	(<H2> i=HeadBody() <HC>)
	{System.out.print("H2 costam Hc ");}
	{return "<h2>"+i+"</h2>";}
}

String Head3():
{
	String i;
}
{
	(<H3> i=HeadBody() <HC>)
	{System.out.print("H3 costam Hc ");}
	{return "<h3>"+i+"</h3>";}
}

String Head4():
{
	String i;
}
{
	(<H4> i=HeadBody() <HC>)
	{System.out.print("H4 costam Hc ");}
	{return "<h4>"+i+"</h4>";}
}

String Head5():
{
	String i;
}
{
	(<H5> i=HeadBody() <HC>)
	{System.out.print("H5 costam Hc ");}
	{return "<h5>"+i+"</h5>";}
}

String Code():
{
	String i;
}
{
	(<CODEO> i=CodeFileBody() <CODEC>)
	{System.out.print("CODEo costam CODEc ");}
	{return "<pre>"+i+"</pre>";}
}

String File():
{
	String i;
}
{
	(<FILEO> i=CodeFileBody() <FILEC>)
	{System.out.print("FILEo costam FILEc ");}
	{return "<pre>"+i+"</pre>";}
}

JAVACODE
String CodeFileBody() {
      Token tok;
	  String i="";
      while (true) {
        tok = getToken(1);
        if (tok.kind == CODEC || tok.kind == FILEC) break;
		else {i+=tok.image;}
        tok = getNextToken();
      }
	  return i;
}

String Quote():
{
	String value="";
	String i;
}
{
	LOOKAHEAD(<QUOTE1> (Zagniezdzalne2())+ (<ENTER> | <QUOTE1> | <QUOTE2> | <QUOTE3> | <EOF>))
	(
	<QUOTE1> 
		{System.out.print("QUOTE1 ");}
	(
	LOOKAHEAD(Zagniezdzalne2() [<ENTER>]) i=Zagniezdzalne2() //myślałem, że usunąłem ten [ENTER], chyba można go wywalić
		{value+=i;}
	)+
	)
		{return "<blockquote>"+value+"</blockquote>";}
	| 
	LOOKAHEAD(<QUOTE2> (Zagniezdzalne2())+ (<ENTER> | <QUOTE1> | <QUOTE2> | <QUOTE3> | <EOF>))
	(
	<QUOTE2> 
		{System.out.print("QUOTE2 ");}
	(
	LOOKAHEAD(Zagniezdzalne2()) i=Zagniezdzalne2()
		{value+=i;}
	)+
	)
		{return "<blockquote><blockquote>"+value+"</blockquote></blockquote>";}
	| 
	LOOKAHEAD(<QUOTE3> (Zagniezdzalne2())+ (<ENTER> | <QUOTE1> | <QUOTE2> | <QUOTE3> | <EOF>))
	(
	<QUOTE3> 
		{System.out.print("QUOTE3 ");}
	(
	LOOKAHEAD(Zagniezdzalne2()) i=Zagniezdzalne2()
		{value+=i;}
	)+
	)
		{return "<blockquote><blockquote><blockquote>"+value+"</blockquote></blockquote></blockquote>";}
	
}
String ListaU():
{
	String value="";
	String i;
}
{
	(LOOKAHEAD(3)
	{System.out.print("ListaUo ");}
	i = ListaUElement()
	{value+=i;}
	)+
	{System.out.print("ListaUc ");}
	{return "<ul>"+value+"</ul>";}
}
String ListaUElement():
{
	String value="";
	String i;
}
{
	(
		<LISTAN> 
		{System.out.print("ListaN ");}
		(
		LOOKAHEAD(Zagniezdzalne2()) i=Zagniezdzalne2()
			{value+=i;}
		)*
		<ENTER>
		{System.out.print("ListaUElement ");}
		{return "<li>"+value+"</li>";}
	)
	|
	(
		value = ListaUZagniezdzona()
		{return value;}
	)
}
String ListaUZagniezdzona():
{
	String value="";
	String i;
}
{
		{System.out.print("ListaUZagniezdzonao ");}
	(LOOKAHEAD(2)
		<DOUBLE_SPACE> 
		i=ListaUElement()
		{value+=i;}
	)+
		{System.out.print("ListaUZagniezdzonac ");}
		{return "<ul>"+value+"</ul>";}
}
String ListaO():
{
	String value="";
	String i;
}
{
	(LOOKAHEAD(3)
	{System.out.print("ListaOo ");}
	i = ListaOElement()
	{value+=i;}
	)+
	{System.out.print("ListaOc ");}
	{return "<ol>"+value+"</ol>";}
}
String ListaOElement():
{
	String value="";
	String i;
}
{
	(
		<LISTAP> 
		{System.out.print("ListaO ");}
		(
		LOOKAHEAD(Zagniezdzalne2()) i=Zagniezdzalne2()
			{value+=i;}
		)*
		<ENTER>
		{System.out.print("ListaOElement ");}
		{return "<li>"+value+"</li>";}
	)
	|
	(
		value = ListaOZagniezdzona()
		{return value;}
	)
}
String ListaOZagniezdzona():
{
	String value="";
	String i;
}
{
		{System.out.print("ListaOZagniezdzonao ");}
	(LOOKAHEAD(2)
		<DOUBLE_SPACE> 
		i=ListaOElement()
		{value+=i;}
	)+
		{System.out.print("ListaOZagniezdzonac ");}
		{return "<ol>"+value+"</ol>";}
}
String Row():	//wiersz tabeli, tabela jest zbiorem wierszy
{
	String value="";
	String i;
}
{
	<ENTER>
		{System.out.print("Tabelao ");}
	( LOOKAHEAD(2)
		( LOOKAHEAD(2)i=Komorka() | i=HKomorka() )
		{value+=i;}
	)+
	(<KOLUMNA> | <HEADER>)?
		{System.out.print("Tabelac ");}
		{return "<tr>"+value+"</tr>\n";}
}
String Komorka():	//wiersz tabeli, tabela jest zbiorem wierszy
{
	String value="";
	String i;
	int count=0;
}
{
		{System.out.print("Komórkao ");}
	( 
		<KOLUMNA> 
		(
		LOOKAHEAD(Zagniezdzalne2()) i=Zagniezdzalne2()
			{value+=i;}
		)+
		//LOOKAHEAD(<KOLUMNA><KOLUMNA>) //chyba jednak to gdzieś wypada wsadzić
			(LOOKAHEAD(<KOLUMNA><KOLUMNA>) //a może lookahead(2) powinno być?
			<KOLUMNA>
			{count++;}
			)*
	)
		{System.out.print("Komórkac ");}
		{if (count==0) return "<td>"+value+"</td>"; else return "<td colspan=\""+ Integer.toString(count+1)+"\">"+value+"</td>";}
}
String HKomorka():	//wiersz tabeli, tabela jest zbiorem wierszy
{
	String value="";
	String i;
	int count=0;
}
{
		{System.out.print("Komórkao ");}
	( 
		<HEADER> 
		(
		LOOKAHEAD(Zagniezdzalne2()) i=Zagniezdzalne2()
			{value+=i;}
		)+
		//LOOKAHEAD(<KOLUMNA><KOLUMNA>) //chyba jednak to gdzieś wypada wsadzić
			(LOOKAHEAD(<KOLUMNA><KOLUMNA>)
			<KOLUMNA>
			{count++;}
			)*
	)
		{System.out.print("Komórkac ");}
		{if (count==0) return "<th>"+value+"</th>"; else return "<td colspan=\""+ Integer.toString(count+1)+"\">"+value+"</td>";}
}

String Symbol():
{
	String i="";
	Token t;
}
{
	(t=<SYMBOL>)
	{System.out.print("SYMBOL");}
	{if(t.image.equals("->")){System.out.print(t.image);return "&#8592";}
	if(t.image.equals("<-")){System.out.print(t.image);return "&#8594;";}
	if(t.image.equals("<->")){System.out.print(t.image);return "&#8596";}
	if(t.image.equals("=>")){System.out.print(t.image);return "&#8658";}
	if(t.image.equals("<=")){System.out.print(t.image);return "&#8656";}
	if(t.image.equals("<=>")){System.out.print(t.image);return "&#8660";}
	if(t.image.equals(">>")){System.out.print(t.image);return "&#187";}
	if(t.image.equals("<<")){System.out.print(t.image);return "&#171";}
	if(t.image.equals("--")){System.out.print(t.image);return "&#8211";}
	if(t.image.equals("---")){System.out.print(t.image);return "&#8212";}
	if(t.image.equals("(c)")){System.out.print(t.image);return "&#169";}
	if(t.image.equals("(tm)")){System.out.print(t.image);return "&#8482";}
	if(t.image.equals("(r)")){System.out.print(t.image);return "&#174";}
	 return "" ;
	}
	  
}

String Emot():
{
	String i="";
	Token t;
}
{
	(t=<EMOTKA>)
	{System.out.print("EMOT");}
	{if(t.image.equals("8-)")){System.out.print(t.image);return "<img src=\"1.gif\" alt="+t.image+" />";}
	 if(t.image.equals("8-O")){System.out.print(t.image);return "<img src=\"2.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-(")){System.out.print(t.image);return "<img src=\"3.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-)")){System.out.print(t.image);return "<img src=\"4.gif\" alt="+t.image+" />";}
	 if(t.image.equals("=)")){System.out.print(t.image);return "<img src=\"5.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-/")){System.out.print(t.image);return "<img src=\"6.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-\\")){System.out.print(t.image);return "<img src=\"7.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-?")){System.out.print(t.image);return "<img src=\"8.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-D")){System.out.print(t.image);return "<img src=\"9.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-P")){System.out.print(t.image);return "<img src=\"10.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-O")){System.out.print(t.image);return "<img src=\"11.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-X")){System.out.print(t.image);return "<img src=\"12.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":-|")){System.out.print(t.image);return "<img src=\"13.gif\" alt="+t.image+" />";}
	 if(t.image.equals(";-)")){System.out.print(t.image);return "<img src=\"14.gif\" alt="+t.image+" />";}
	 if(t.image.equals("^_^")){System.out.print(t.image);return "<img src=\"15.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":?:")){System.out.print(t.image);return "<img src=\"16.gif\" alt="+t.image+" />";}
	 if(t.image.equals(":!:")){System.out.print(t.image);return "<img src=\"17.gif\" alt="+t.image+" />";}
	 if(t.image.equals("LOL")){System.out.print(t.image);return "<img src=\"18.gif\" alt="+t.image+" />";} 
	 if(t.image.equals("FIXME")){System.out.print(t.image);return "<img src=\"19.gif\" alt="+t.image+" />";}
	 if(t.image.equals("DELETEME")){System.out.print(t.image);return "<img src=\"20.gif\" alt="+t.image+" />";}
	 return "" ;
	}
	  
}

String Footnotes()://to jest bezsensu bo trzeb jeszcze skrypttty zrobic
{
	String i;
}
{
	(<FOOTNOTEO> i=CzystyTekst() <FOOTNOTEC>)
		{System.out.print("Footnotes ");}
		{return "<div id=\"insitu__fn\" class=\"insitu-footnote JSpopup\" aria-hidden=\"true\" role=\"tooltip\" style=\"top: 3203.109375px; left: 202px; display: none;\">"+i+"</div>";}
	
}
String Obrazek():
{
	String i="";
	Token t=null;
	String wynik="";
}
{
	
	(<OBRO> (LOOKAHEAD(3)  t=<URL> | t=<DOMENA> | i=CzystyTekst() )  <OBRC>)
		{System.out.print("Obrazek ");
		if(i==""){
		i=t.image;
		}
		}
		{wynik+= "<img src="+i+" />";}

	{return wynik;}	
	
}


String Link():
{
	Token tl=null;
	Token t=null;
	String i="";
    String l="";
}
{
	t=<URL> 
		{System.out.print("LINK ");}
		{return "<a href="+t.image+">"+t.image+"</a>";}
	| LOOKAHEAD(3)
	<LINKO> (LOOKAHEAD(3) tl=<URL> | tl =<DOMENA>  | l=CzystyTekst()  ) <LINKC>	//to powinien być też link wewnętrzny do sekcji, ale nie wiem skąd wziąć aktualny adres strony
		{System.out.print("LINK2 ");
		if (l==""){
		l=tl.image;
		}
		}
		{return "<a href="+l+">"+l+"</a>";}
	|LOOKAHEAD(4)
	<LINKO> (LOOKAHEAD(4)<SPACE>)*   (LOOKAHEAD(3)  tl=<URL>|tl =<DOMENA>  | l=CzystyTekst()  ) (<SPACE>)* <KOLUMNA> (LOOKAHEAD(3) t=<URL> | t =<DOMENA> |i=CzystyTekst()) <LINKC>
		{System.out.print("LINK3 ");
		if (l==""){
		l=tl.image;
		}
		if (i==""){
		i=t.image;
		}
		}
		{return "<a href=\""+l+"\" title=\""+l+"\">"+i+"</a>";}

}

String Email():	//już powinno działać
{
	Token t;
	String i;
}
{
	t=<EMAIL>
		{i=t.image.substring(1,t.image.length()-1);}
		{System.out.print("EMAIL ");}
		{return "<a href=\"mailto:"+i+"\""+" title=\""+i+"\">"+i+"</a>";}
}
	
String Slowo():
	{Token t;}
	{
		(
		t= <WORD>
		|
		t= <NUMER>
		//|
		//t= <ENTER>
		//|
		//t= <MORETHANLITERA>
		)
		{return t.image;}
	}
	
String CzystyTekst():
	{	Token t;
		String value="";
		String i="";
	}
	{
		(LOOKAHEAD(2)
		(
		//t=<ENTER>
		//|
		i=Slowo()
		{value+=i;}
		|
		t = <MORETHANLITERA>
		{ 
		value +=t.image; 
		}
		|
		t=<SPACE>
		{value+=" ";}
		)
		)+
		{System.out.print("CzystyTekst ");}
		{return value;}
	}
